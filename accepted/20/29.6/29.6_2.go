package main

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"time"
)

/*
Научиться правильно останавливать приложения.
Что нужно сделать
В работе часто возникает потребность правильно останавливать приложения.
Например, когда наш сервер обслуживает соединения, а нам хочется, чтобы
все текущие соединения были обработаны и лишь потом произошло выключение
сервиса. Для этого существует паттерн graceful shutdown.

Напишите приложение, которое выводит квадраты натуральных чисел на экран,
а после получения сигнала ^С обрабатывает этот сигнал, пишет «выхожу из
программы» и выходит.

Советы и рекомендации
Для реализации данного паттерна воспользуйтесь каналами и оператором
select с default-кейсом.

Что оценивается
Код выводит квадраты натуральных чисел на экран, после получения ^С
происходит обработка сигнала и выход из программы.
*/

func waitExit(c chan os.Signal, exit *bool) {
	defer close(c)
	<-c
	*exit = true
}

func main() {
	c := make(chan os.Signal, 1)
	exit := false
	signal.Notify(c, syscall.SIGINT)
	go waitExit(c, &exit)

	for i := 0; ; i++ {
		if exit {
			break
		}
		if i%10 == 0 && i != 0 {
			fmt.Printf("\n")
		}
		fmt.Printf("%-6v\t", i*i)
		time.Sleep(500 * time.Millisecond)

	}
	fmt.Printf("\nВыхожу из программы\n")
}
